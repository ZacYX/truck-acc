// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER

  @@map("user_role")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  reviews       Review[]

  @@map("user")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_token")
}

model Address {
  id       Int     @id @default(autoincrement())
  unit     String?
  street   String?
  city     String?
  province String?
  country  String  @default("Canada")
  zip      String?

  @@map("address")
}

model Post {
  id       Int      @id @default(autoincrement())
  title    String?
  content  String?
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@map("post")
}

model Product {
  id         Int        @id @default(autoincrement())
  sku        String     @unique
  name       String
  details    String?
  brand      String?
  inventory  Int?
  price      Float?
  salePrice  Float?
  createAt   DateTime   @default(now())
  updateAt   DateTime   @updatedAt
  images     Picture[]
  categories Category[]
  reviews    Review[]

  @@map("product")
}

model Picture {
  id        Int      @id @default(autoincrement())
  alt       String?
  height    Int?
  width     Int?
  url       String
  order     String?
  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?
  createAt  DateTime @default(now())

  @@map("picture")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  details  String?
  order    String?
  products Product[]

  @@map("category")
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    String
  rating    Int
  comment   String
  createAt  DateTime @default(now())
  Product   Product  @relation(fields: [productId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@map("review")
}

model WebInfo {
  id       Int          @id @default(autoincrement())
  name     String       @unique
  category String?
  title    String[]
  content  String[]
  images   WebPicture[]
  createAt DateTime     @default(now())
  updateAt DateTime     @updatedAt

  @@map("web_info")
}

model WebPicture {
  id        Int      @id @default(autoincrement())
  alt       String?
  height    Int?
  width     Int?
  url       String
  order     String?
  createAt  DateTime @default(now())
  WebInfo   WebInfo? @relation(fields: [webInfoId], references: [id])
  webInfoId Int?

  @@map("web_picture")
}

model NavbarItem {
  id      Int     @id @default(autoincrement())
  title   String  @unique
  details String?
  link    String
  order   String?

  @@map("navbar_item")
}
