// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String?
  phone         String?
  secondPhone   String?
  email         Email?
  address       Address?
  registerAt    DateTime       @default(now())
  updateAt      DateTime       @updatedAt
  posts         Post[]
  roles         Role[]
  passwordLogin PasswordLogin?
}

model PasswordLogin {
  id           Int    @id @default(autoincrement())
  loginName    String @unique
  passwordHash String
  user         User   @relation(fields: [userId], references: [id])
  userId       Int    @unique
}

model Role {
  id         Int          @id @default(autoincrement())
  title      String
  details    String
  permission Permission[]
  user       User[]
}

model Permission {
  id      Int    @id @default(autoincrement())
  title   String
  details String
  roles   Role[]
}

model Email {
  id           Int     @id @default(autoincrement())
  emailAddress String  @unique
  isVerified   Boolean @default(false)
  user         User    @relation(fields: [userId], references: [id])
  userId       Int     @unique
}

model Address {
  id      Int     @id @default(autoincrement())
  unit    String?
  street  String?
  city    String?
  provice String?
  country String  @default("Canada")
  zip     String?
  user    User    @relation(fields: [userId], references: [id])
  userId  Int     @unique
}

model Post {
  id       Int      @id @default(autoincrement())
  title    String?
  content  String?
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  author   User     @relation(fields: [authorId], references: [id])
  authorId Int      @unique
}

model Product {
  id         Int        @id @default(autoincrement())
  sku        String     @unique
  name       String
  details    String
  quantity   Int
  price      Float
  size       String?
  color      String?
  pictures   Picture[]
  categories Category[]
}

model Picture {
  id        Int      @id @default(autoincrement())
  name      String?
  height    Int      @default(200)
  width     Int      @default(100)
  url       String
  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  details  String?
  products Product[]
}
