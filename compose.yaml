# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  frontend:
    container_name: ta
    build:
      context: .
    entrypoint: ["/app/docker-entrypoint.sh"]
    #without following command container will not start correctly
    # command: ["npm", "run", "dev"]   #use this for development: docker compose watch
    command: ["npm", "run", "start"]
    ports:
      - 3000:3000
    environment:
      NODE_ENV: production
      # NODE_ENV: development   #use this for development: docker compose watch
      # env set below does not work, use entrypoint sh instead
      # DATABASE_URL: /run/secrets/db_url
    env_file: 
      - .env.production
    # env_file: ".env"
    secrets:
      - db_url
      - google_id
      - google_secret
      - resend_api_key
      - minio_accesskey
      - minio_secretkey
    develop:
      watch:
        - action: sync
          path: ./
          target: /app
    networks:
      - docker-network
            
networks:
  docker-network:
    external: true

secrets:
  db_url:
    file: ./secret/database_url.txt
  google_id:
    file: ./secret/google_id.txt
  google_secret:
    file: ./secret/google_secret.txt
  resend_api_key:
    file: ./secret/resend_api_key.txt
  minio_accesskey:
    file: ./secret/minio_accesskey.txt
  minio_secretkey:
    file: ./secret/minio_secretkey.txt

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt


